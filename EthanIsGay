#pragma config(Sensor, port2,  LEDSensor,      sensorVexIQ_LED)
#pragma config(Sensor, port3,  HueSensor,      sensorVexIQ_ColorHue)
#pragma config(Sensor, port4,  GyroSensor,     sensorVexIQ_Gyro)
#pragma config(Sensor, port5,  SonarSensor,    sensorVexIQ_Distance)
#pragma config(Sensor, port8,  BumperSensor,   sensorVexIQ_Touch)
#pragma config(Motor,  motor1,          left,          tmotorVexIQ, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motor6,          right,         tmotorVexIQ, PIDControl, reversed, driveRight, encoder)
#pragma config(Motor,  motor10,         clawsUps,      tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor11,         claws,     tmotorVexIQ, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
//* goes left 90 degrees
void goL90(){
turnLeft(.68 ,rotations,60);
}

//* goes Right 90 degrees
void goR90(){
turnRight(.68 ,rotations,60);
}

//* goes forward a number of rotation and speed
void goForward(float rotation,int speed){
setMotorSpeed(left, speed);
setMotorSpeed(right, speed);
float rotationsPerSecond = speed / 60;
float time = rotation / rotationsPerSecond;
sleep(time * 1000);
setMotorSpeed(left, 0);
setMotorSpeed(right, 0);
}
//* goes Backward a number of rotation and speed
void goBackward(float rotation,int speed){
setMotorSpeed(left, -speed);
setMotorSpeed(right, -speed);
float rotationsPerSecond = speed / 60;
float time = rotation / rotationsPerSecond;
sleep(time * 1000);
setMotorSpeed(left, 0);
setMotorSpeed(right, 0);
}

//* takes cm and turns it to rotations
float ToRotation(int num, int speed){
float wheel_length = 6;
float wheel_cer = (wheel_length * 3.14);
float rotation = (num / wheel_cer);
return rotation;
}

void clawC(){
setMotorSpeed(claws, 60);
delay(200);
setMotorSpeed(claws, 0);
}

void clawO(){
setMotorSpeed(claws, -60);
delay(200);
setMotorSpeed(claws, 0);
}
//* moves claw up, 3 is fully up
void clawUp(float time){
	setMotorSpeed(clawUps,60);
	delay((time * 1000));
	setMotorSpeed(clawUps,0);
}
//* moves claw down, 3 is fully down
	void clawDown(float time){
	setMotorSpeed(clawUps,-60);
	delay((time * 1000));
	setMotorSpeed(clawUps,0);
}

int time(int num){
delay(num);
return 1;

}

task main(){
clawUp(3);
	if(getDistanceValue(port5) < 30)
		{
		clawO();
		clawDown(3);
		clawC();
		clawUp(3);
		clawO();
	while((getDistanceValue(port5) > 30) = true)
		{
		repeat(forever)
		{
			goForward(ToRotation(110,60),60);
		}
	}
}
